#ifndef BSDFTYPE_H
#define BSDFTYPE_H

#include <Tesla/core/core.h>

enum Type {
	BSDF_REFLECTION = (1 << 0),
	BSDF_TRANSMISSION = (1 << 1),
	BSDF_DIFFUSE = (1 << 2),
	BSDF_SPECULAR = (1 << 3),
	BSDF_GLOSSY = (1 << 4),

	BSDF_DIFFUSE_REFLECTION = (BSDF_DIFFUSE | BSDF_REFLECTION),
	BSDF_DIFFUSE_TRANSMISSION = (BSDF_DIFFUSE | BSDF_TRANSMISSION),
	BSDF_SPECULAR_REFLECTION = (BSDF_GLOSSY | BSDF_REFLECTION),
	BSDF_SPECULAR_TRANSMISSION = (BSDF_GLOSSY | BSDF_TRANSMISSION),
	BSDF_GLOSSY_REFLECTION = (BSDF_GLOSSY | BSDF_REFLECTION),
	BSDF_GLOSSY_TRANSMISSION = (BSDF_GLOSSY | BSDF_TRANSMISSION),

	BSDF_ALL_REFLECTION = (BSDF_DIFFUSE_REFLECTION | BSDF_SPECULAR_REFLECTION | BSDF_GLOSSY_REFLECTION),
	BSDF_ALL_TRANSMISSION = (BSDF_DIFFUSE_TRANSMISSION | BSDF_SPECULAR_TRANSMISSION | BSDF_GLOSSY_TRANSMISSION),

	BSDF_ALL = (BSDF_ALL_REFLECTION | BSDF_ALL_TRANSMISSION)
};

class BSDFType {
private:
	Type type;
public:
	BSDFType();
	BSDFType(Type t) : type(t) {}
	bool hasType(Type t);
	bool isDiffuse();
	bool isSpecular();
	bool isGlossy();
	bool isReflective();
	bool isTransmissive();

	friend std::ostream& operator<<(std::ostream &os, BSDFType &b);
};

#endif